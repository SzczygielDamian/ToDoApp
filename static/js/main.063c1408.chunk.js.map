{"version":3,"sources":["Components/AddTask.js","Components/Task.js","Components/TaskList.js","Components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleState","e","name","target","type","value","setState","Object","defineProperty","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","placeholder","onChange","htmlFor","id","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","FinishTime","toLocaleString","TaskList","tasks","filter","done","sort","b","activeTasks","map","Components_Task","key","doneTasks","Fragment","className","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","deleteTask","toConsumableArray","index","findIndex","splice","ChangeTaskStatus","console","log","forEach","getTime","addTask","counter","prevState","concat","Components_AddTask","Components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.063c1408.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n\r\n  handleState = e => {\r\n    const name = e.target.name;\r\n    const type = e.target.type;\r\n    const value = e.target.value;\r\n\r\n    if (type === \"text\" || type === \"date\") {\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    } else if (type === \"checkbox\") {\r\n      const checked = e.target.checked;\r\n      this.setState({\r\n        [name]: checked\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 4) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"za krótka nazwa zadania\");\r\n    }\r\n  };\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <form>\r\n        <input\r\n          name=\"text\"\r\n          type=\"text\"\r\n          placeholder=\"Dodaj zadanie\"\r\n          value={this.state.text}\r\n          onChange={this.handleState}\r\n        />\r\n        <label htmlFor=\"important\">\r\n          Priorytet\r\n          <input\r\n            name=\"checked\"\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n            id=\"important\"\r\n            onChange={this.handleState}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor=\"date\">\r\n          Termin wykonania zadania:\r\n          <input\r\n            name=\"date\"\r\n            type=\"date\"\r\n            id=\"date\"\r\n            value={this.state.date}\r\n            min={this.minDate}\r\n            max={maxDate}\r\n            onChange={this.handleState}\r\n          />\r\n        </label>\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = props => {\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  const style = {\r\n    color: \"red\"\r\n  };\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do{\" \"}\r\n          <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const FinishTime = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - ( zrobić do{\" \"}\r\n          <em>{date} </em> )\r\n          <br />- potwierdzenie wykonania<span>{FinishTime} </span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  done.sort((a, b) => a.finishDate - b.finishDate);\r\n  active.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  const doneTasks = done.map(task => (\r\n    <Task key={task.id} task={task} delete={props.delete} />\r\n  ));\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h2>Lista zadań do zrobienia</h2>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań do wykonania</p>}\r\n      </div>\r\n      <hr />\r\n      <div className=\"done\">\r\n        <h3>\r\n          Lista wykonanych zadań <em>{done.length}</em>\r\n        </h3>\r\n        {done.length > 5 && (\r\n          <span>Wyświetlone jest tylko 5 ostatnich zadań</span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.counter = 2;\n    this.state = {\n      task: [\n        {\n          id: 0,\n          text: \"Zrobić projekt\",\n          date: \"2018-02-15\",\n          important: true,\n          active: true,\n          finishDate: null\n        },\n        {\n          id: 1,\n          text: \"zarać w FIFE\",\n          date: \"2018-05-15\",\n          important: false,\n          active: true,\n          finishDate: null\n        }\n      ]\n    };\n  }\n\n  deleteTask = id => {\n    const tasks = [...this.state.task];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      task: tasks\n    });\n  };\n\n  ChangeTaskStatus = id => {\n    console.log(\"Change  id \" + id);\n    const tasks = [...this.state.task];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      task: tasks\n    });\n  };\n\n  addTask = (text, date, important) => {\n    const Task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n\n    this.setState(prevState => ({\n      task: [...prevState.task, Task]\n    }));\n    return true;\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AddTask add={this.addTask} />\n          <hr />\n          <TaskList\n            tasks={this.state.task}\n            delete={this.deleteTask}\n            change={this.ChangeTaskStatus}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}